
# Monitor process cpu and memory usage with filters and aggregation
[[inputs.procfilter]] 
  ## Full documentation: https://github.com/neoliv/telegraf/blob/master/plugins/inputs/procfilter/README.md
  ## Set various prefixes used in identifiers.
  measurement_prefix = "pf."
  # tag_prefix = ""
  # field_prefix = ""
  ## Try to use Linux kernel netlink to improve CPU metrics on short-lived processes.
  netlink = false # Not yet ready for production, CPU usage a bit high.
  ## Wake up interval for the extra sampling goroutine. Shorter means you will get more accurate metrics (mainly CPU usage) for short lived processes, but it will cost you more CPU.
  ## Note that the B4intervalB4 telegraf configuration value (eg: 10s) is also used to gather and output metrics. The procfilter wakeup_interval is used to collect extra sample and is useful only for short-lived processes.
  # wakeup_interval = 100 # in ms
  ## Update age ratio indicates to the sampling goroutine when to update metrics for a process depending on its age. Young processes data get extra updates to collect relevant metrics before they vanish.
  # update_age_ratio = 0.5 # 0 => update all processes every time we wakeup (not recommended), 1.0 => update if the last update done is older than the age of the process. 

  ## Describe what you want to measure by writting a script.
  ## (in an external file or embedded here.)
  # script_file = ""
  script = """

     #
     # Identify what is using a lot of ressources (CPU/RSS/...)
     # Find the top consimers of CPU/RAM/swap/... by user, command
     # Gathered in measurement top.*
     #

     # Pack by command (ie: all java processes aggregated)
     by_cmd <- by(cmd)
     top.by.cmd.cpu = tag(cmd) field(cpu,process_nb)     <- top(cpu,5,by_cmd)
     top.by.cmd.rss = tag(cmd) field(rss,process_nb)     <- top(rss,5,by_cmd)
     top.by.cmd.swap = tag(cmd) field(swap,process_nb)   <- top(swap,5,by_cmd)
     top.by.cmd.iobps = tag(cmd) field(iobps,process_nb) <- top(iobps,5,by_cmd)
     top.by.cmd.thread_nb = tag(cmd) field(thread_nb,process_nb) <- top(thread_nb,3,by_cmd)

     # Pack by user (ie: all processes from user joe aggregated)
     by_user <- by(user)
     top.by.user.cpu = tag(user) field(cpu,process_nb)     <- top(cpu,3,by_user)
     top.by.user.rss = tag(user) field(rss,process_nb)     <- top(rss,3,by_user)
     top.by.user.swap = tag(user) field(swap,process_nb)   <- top(swap,3,by_user)
     top.by.user.iobps = tag(user) field(iobps,process_nb) <- top(iobps,3,by_user)
     top.by.user.process_nb = tag(user) field(process_nb)  <- top(process_nb,3,by_user)


     #
     # Aggregate ressource usage by workload.
     # eg: all processes related to Veritas packed as one measurement wl.veritas
     # Note that telegraf-configure.sh will comment/uncomment some parts of this script depending on what is running on the server.
     #

     # Technical/root workloads (sysadmin related)
     # Note that the declaration order is significant. Once a process is affected to a workload it will not be assigned to another workload (the not(filters('^wl[.]'r)))
     wl.telegraf <- cmd('telegraf')
     wl.telegraf = field(process_nb,thread_nb,cpu,rss,vsz,swap,iobps) <- pack(wl.telegraf)

     wl.omni <- and(not(filters('^wl[.]'r)), or(cmd('^omv_'r),user('omni')))
     wl.omni = field(process_nb,thread_nb,cpu,rss,vsz,swap,iobps) <- pack(wl.omni)
     #wl.veritas <- and(not(filters('^wl[.]'r)), user(0), or(cmd('^vx'r),cmdline('/usr/lib/vxvm/'r)))
     #wl.veritas = field(process_nb,thread_nb,cpu,rss,vsz,swap,iobps) <- pack(wl.veritas)
     wl.ito <- and(not(filters('^wl[.]'r)), or(path('^/opt/OV/'r),path('^/opt/perf/'r)))
     wl.ito = field(process_nb,thread_nb,cpu,rss,vsz,swap,iobps) <- pack(wl.ito)
     wl.tsm  <- and(not(filters('^wl[.]'r)), or(user('tsmbck'),cmd('dsmc')))
     wl.tsm  = field(process_nb,thread_nb,cpu,rss,vsz,swap,iobps) <- pack(wl.tsm)
     wl.syslog <- and(not(filters('^wl[.]'r)), cmd('syslog-ng|rsyslogd'r))
     wl.syslog = field(process_nb,thread_nb,cpu,rss,vsz,swap,iobps) <- pack(wl.syslog)
     wl.influxdb <- and(not(filters('^wl[.]'r)), user('influxdb'))
     wl.influxdb = field(process_nb,thread_nb,cpu,rss,vsz,swap,iobps) <- pack(wl.influxdb)

     #
     # Dynamic workloads
     #

     ##BEGIN oracle
     # Pack by oracle SID
     # /tech/oracle/server/11204/bin/tnslsnr LISTENER_FRET01A -inherit
     # oracleFRET01A, ora_ctwr_FRET01A,  ...
     wl.oracle <- user('oracle|system'r)
     ora_exe <- revar(exe,'ora(?:_[^_]+_|cle)([0-9a-zA-Z]+).*','$1',application,wl.oracle)
     ora_cmdline <- revar(cmdline,'.*LISTENER_([0-9a-zA-Z]+).*','$1',application,cmd('tnslsnr',wl.oracle))
     # Synthetic workload for oracle.
     wl.oracle = field(cpu,rss,vsz,swap,process_nb,thread_nb,iobps) <- pack(wl.oracle)
     # Split workload by instance (using the application tag) 
     by.oracle = tag(application) field(cpu,rss,vsz,swap,process_nb,thread_nb,iobps) <- packby(application, ora_exe, ora_cmdline)
     ##END oracle




     # Catch all root processes not in any other workload.
     wl.root <- and(not(filters('^wl[.]'r)), user(0))
     wl.root = field(process_nb,cpu,rss,vsz,swap,iobps) <- pack(wl.root)

     # Catch all processes not in any other workload.
     wl._other <- not(filters('^wl[.]'r))
     wl._other = field(process_nb,cpu,rss,vsz,swap,iobps) <- pack(wl._other)

   """
